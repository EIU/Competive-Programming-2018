

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.StringTokenizer;

public class Main {

    public static void main(String[] args) throws IOException {
        InputReader reader = new InputReader(System.in);
        ArrayList<Integer> arrList = new ArrayList();
        ArrayList<Integer> arrListB = new ArrayList();
        int n = reader.nextInt();
        for (int i = 0; i < n; i++) {
            int m = reader.nextInt();
            arrList.add(m);
        }

        Collections.sort(arrList);
        Collections.reverse(arrList);
        int j = arrList.size() - 1;
        for (int i = 0; i < arrList.size(); i++) {
            
            int temp = arrList.get(i) - j;
            arrListB.add(temp);
            j--;
        }
        
        Collections.sort(arrListB);
        System.out.println(arrListB.get(arrListB.size() - 1) + arrList.size() + 1);
        
    }

    static class InputReader {

        StringTokenizer tokenizer;
        BufferedReader reader;
        String token;
        String temp;

        public InputReader(InputStream stream) {
            tokenizer = null;
            reader = new BufferedReader(new InputStreamReader(stream));
        }

        public InputReader(FileInputStream stream) {
            tokenizer = null;
            reader = new BufferedReader(new InputStreamReader(stream));
        }

        public String nextLine() throws IOException {
            return reader.readLine();
        }

        public String next() {
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                try {
                    if (temp != null) {
                        tokenizer = new StringTokenizer(temp);
                        temp = null;
                    } else {
                        tokenizer = new StringTokenizer(reader.readLine());
                    }

                } catch (IOException e) {
                }
            }
            return tokenizer.nextToken();
        }

        public double nextDouble() {
            return Double.parseDouble(next());
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }
    }
}
